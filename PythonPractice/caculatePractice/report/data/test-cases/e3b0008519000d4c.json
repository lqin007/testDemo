{
  "uid" : "e3b0008519000d4c",
  "name" : "test_mul[string_mul]",
  "fullName" : "test_caculate.TestCaculate#test_mul",
  "historyId" : "5a270b6b7ad75d0d541f820c025bee26",
  "time" : {
    "start" : 1617694454717,
    "stop" : 1617694454718,
    "duration" : 1
  },
  "status" : "broken",
  "statusMessage" : "TypeError: can't multiply sequence by non-int of type 'str'",
  "statusTrace" : "self = <caculatePractice.test_caculate.TestCaculate object at 0x000001D1B31BB9D0>, cal = <caculatePractice.caculate.Caculate object at 0x000001D1B31B7220>, a = 'a'\nb = 'b', result = 'a*b'\n\n    @pytest.mark.parametrize('a,b,result', data['mul']['data'], ids=data['mul']['name'])\n    @allure.story(\"计算器乘法\")\n    def test_mul(self, cal, a, b, result):\n        with allure.step(\"乘法计算结果\"):\n>           expect = cal.multiplication(a, b)\n\ntest_caculate.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <caculatePractice.caculate.Caculate object at 0x000001D1B31B7220>, a = 'a', b = 'b'\n\n    def multiplication(self, a, b):\n>       result = a*b\nE       TypeError: can't multiply sequence by non-int of type 'str'\n\ncaculate.py:13: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cal",
    "time" : {
      "start" : 1617694454113,
      "stop" : 1617694454113,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: can't multiply sequence by non-int of type 'str'",
    "statusTrace" : "self = <caculatePractice.test_caculate.TestCaculate object at 0x000001D1B31BB9D0>, cal = <caculatePractice.caculate.Caculate object at 0x000001D1B31B7220>, a = 'a'\nb = 'b', result = 'a*b'\n\n    @pytest.mark.parametrize('a,b,result', data['mul']['data'], ids=data['mul']['name'])\n    @allure.story(\"计算器乘法\")\n    def test_mul(self, cal, a, b, result):\n        with allure.step(\"乘法计算结果\"):\n>           expect = cal.multiplication(a, b)\n\ntest_caculate.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <caculatePractice.caculate.Caculate object at 0x000001D1B31B7220>, a = 'a', b = 'b'\n\n    def multiplication(self, a, b):\n>       result = a*b\nE       TypeError: can't multiply sequence by non-int of type 'str'\n\ncaculate.py:13: TypeError",
    "steps" : [ {
      "name" : "乘法计算结果",
      "time" : {
        "start" : 1617694454718,
        "stop" : 1617694454718,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "TypeError: can't multiply sequence by non-int of type 'str'\n",
      "statusTrace" : "  File \"D:\\Program Files\\PycharmProjects\\pythonProject\\PythonPractice\\caculatePractice\\test_caculate.py\", line 33, in test_mul\n    expect = cal.multiplication(a, b)\n  File \"D:\\Program Files\\PycharmProjects\\pythonProject\\PythonPractice\\caculatePractice\\caculate.py\", line 13, in multiplication\n    result = a*b\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "cal::0",
    "time" : {
      "start" : 1617694454958,
      "stop" : 1617694454959,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "计算器"
  }, {
    "name" : "story",
    "value" : "计算器乘法"
  }, {
    "name" : "suite",
    "value" : "test_caculate"
  }, {
    "name" : "subSuite",
    "value" : "TestCaculate"
  }, {
    "name" : "host",
    "value" : "LAPTOP-53C5DJ5K"
  }, {
    "name" : "thread",
    "value" : "97772-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_caculate"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "a",
    "value" : "'a'"
  }, {
    "name" : "b",
    "value" : "'b'"
  }, {
    "name" : "result",
    "value" : "'a*b'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e3b0008519000d4c.json",
  "parameterValues" : [ "'a'", "'b'", "'a*b'" ]
}